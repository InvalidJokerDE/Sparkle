package de.fruxz.sparkle.tool.display.item.quirk

import de.fruxz.sparkle.tool.display.item.Item
import org.bukkit.inventory.ItemStack
import org.bukkit.inventory.meta.*

/**
 * This interface defines a special way, to handle a specific item-meta
 * of an item, by having a special item processing method.
 * This processing method is defined by the type of meta is required.
 * @author Fruxz
 * @since 1.0
 */
interface Quirk {

	/**
	 * This is the process, to handle the specific meta of an [Item].
	 * It is used during the processing of an [Item] to an [ItemStack].
	 * @author Fruxz
	 * @since 1.0
	 */
	val itemStackProcessing: ItemStack.() -> Unit

	companion object {

		/**
		 * This function creates a [Quirk] instance, with a custom processing method.
		 * @author Fruxz
		 * @since 1.0
		 */
		private fun <T : ItemMeta> processor(process: T.() -> Unit) = object : Quirk {
			@Suppress("UNCHECKED_CAST")
			override val itemStackProcessing: ItemStack.() -> Unit = {
				val modifiedMeta = itemMeta as T
				itemMeta = modifiedMeta.apply(process)
			}
		}

		/**
		 * This function creates a [Quirk] instance, with an empty processing method.
		 * This means, that the production result is the same, as the input.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		val empty = object : Quirk {
			override val itemStackProcessing: ItemStack.() -> Unit =
				{ }
		}

		/**
		 * This function creates a [Quirk] instance, with a custom processing method.
		 * @see processor
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun <T : ItemMeta> custom(process: T.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [custom] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun <T : ItemMeta> Item.customQuirk(process: T.() -> Unit) = putQuirk(custom(process))

		/**
		 * This function creates a [Quirk] instance, with a Banner target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun banner(process: BannerMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [banner] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.bannerQuirk(process: BannerMeta.() -> Unit) = putQuirk(banner(process))

		/**
		 * This function creates a [Quirk] instance, with a Book target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun book(process: BookMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [book] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.bookQuirk(process: BookMeta.() -> Unit) = putQuirk(book(process))

		/**
		 * This function creates a [Quirk] instance, with a Compass target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun compass(process: CompassMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [compass] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.compassQuirk(process: CompassMeta.() -> Unit) = putQuirk(compass(process))

		/**
		 * This function creates a [Quirk] instance, with a Crossbow target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun crossbow(process: CrossbowMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [crossbow] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.crossbowQuirk(process: CrossbowMeta.() -> Unit) = putQuirk(crossbow(process))

		/**
		 * This function creates a [Quirk] instance, with a Firework target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun firework(process: FireworkMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [firework] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.fireworkQuirk(process: FireworkMeta.() -> Unit) = putQuirk(firework(process))

		/**
		 * This function creates a [Quirk] instance, with a Leather Armor target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun leatherArmor(process: LeatherArmorMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [leatherArmor] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.leatherArmorQuirk(process: LeatherArmorMeta.() -> Unit) = putQuirk(leatherArmor(process))

		/**
		 * This function creates a [Quirk] instance, with a Map target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun map(process: MapMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [map] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.mapQuirk(process: MapMeta.() -> Unit) = putQuirk(map(process))

		/**
		 * This function creates a [Quirk] instance, with a Skull target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun skull(process: SkullMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [skull] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.skullQuirk(process: SkullMeta.() -> Unit) = putQuirk(skull(process))

		/**
		 * This function creates a [Quirk] instance, with a Potion target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun potion(process: PotionMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [potion] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.potionQuirk(process: PotionMeta.() -> Unit) = putQuirk(potion(process))

		/**
		 * This function creates a [Quirk] instance, with a Spawn Egg target.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun spawnEgg(process: SpawnEggMeta.() -> Unit) = processor(process)

		/**
		 * This function applies the [Quirk] to an existing [Item]. The [Quirk] is
		 * generated by the [spawnEgg] function and the [process] parameter.
		 * @author Fruxz
		 * @since 1.0
		 */
		@JvmStatic
		fun Item.spawnEggQuirk(process: SpawnEggMeta.() -> Unit) = putQuirk(spawnEgg(process))

	}

}